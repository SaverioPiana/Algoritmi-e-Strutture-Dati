PSEUDOCODIFICA
/* Cerca nella lista l, realizzata tramite array, il
valore k e restituisci la posizione della prima occorrenza */

head(l)
	return l.head

info(l, i)
	return l.info[i]

next(l, i)
	return l.next[i]
==================================================
/* array "mascherato" */
SEARCH(l, k)
	int i = head(l)  // indice della prima colonna
	while(i != -1)
		if( info(l, i) == k )
		return i
		i = next(l, i)
	return i // i e' uguale a -1
==================================================
SEARCH(l, k)
	int i = l.head  // indice della prima colonna
	while(i != -1)
		if( l.info[i] == k )
		return i
		i = l.next[i]
	return i // i e' uguale a -1
==================================================
DELETE(l, i) // i e' un iteratore valido della lista l
	if( l.head == i ) 		// i e' l'iteratore del primo elemento
		l.head = l.next[i] 	//salto la colonna i
	else					// c'e' un elemento che mi precede
		l.next[l.prev[i]] = l.next[i]  	// mi scavalco (il successivo del mio precedente
										//				e' il mio successivo
	if( l.next[i] != -1)
		l.prev[l.next[i]] = l.prev[i]

	free_column(l, i)
==================================================
DELETE(l, x) // x e' un intero. Cerca e cancella la prima occorrenza di x
	i = l.head
	while( i != -1 )

		if(l.info[i] == x)
		
			if( l.head == i ) 		// i e' l'iteratore del primo elemento
				l.head = l.next[i] 	//salto la colonna i
			else					// c'e' un elemento che mi precede
				l.next[l.prev[i]] = l.next[i]  	// mi scavalco (il successivo del mio precedente
												//				e' il mio successivo
			if( l.next[i] != -1)
				l.prev[l.next[i]] = l.prev[i]

			free_column(l, i)
			return
		i = l.next[i]
==================================================




